// Code generated by yo. DO NOT EDIT.
// Package models contains the types.
package models

import (
	"context"
	"fmt"
	"time"

	"cloud.google.com/go/spanner"
	"google.golang.org/grpc/codes"
)

// Text represents a row from 'Texts'.
type Text struct {
	TextID    string    `spanner:"TextId" json:"TextId"`       // TextId
	Body      string    `spanner:"Body" json:"Body"`           // Body
	CreatedAt time.Time `spanner:"CreatedAt" json:"CreatedAt"` // CreatedAt
}

func TextPrimaryKeys() []string {
	return []string{
		"TextId",
	}
}

func TextColumns() []string {
	return []string{
		"TextId",
		"Body",
		"CreatedAt",
	}
}

func (t *Text) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "TextId":
			ret = append(ret, &t.TextID)
		case "Body":
			ret = append(ret, &t.Body)
		case "CreatedAt":
			ret = append(ret, &t.CreatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (t *Text) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "TextId":
			ret = append(ret, t.TextID)
		case "Body":
			ret = append(ret, t.Body)
		case "CreatedAt":
			ret = append(ret, t.CreatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newText_Decoder returns a decoder which reads a row from *spanner.Row
// into Text. The decoder is not goroutine-safe. Don't use it concurrently.
func newText_Decoder(cols []string) func(*spanner.Row) (*Text, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*Text, error) {
		var t Text
		ptrs, err := t.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &t, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (t *Text) Insert(ctx context.Context) *spanner.Mutation {
	return spanner.Insert("Texts", TextColumns(), []interface{}{
		t.TextID, t.Body, t.CreatedAt,
	})
}

// Update returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (t *Text) Update(ctx context.Context) *spanner.Mutation {
	return spanner.Update("Texts", TextColumns(), []interface{}{
		t.TextID, t.Body, t.CreatedAt,
	})
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (t *Text) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	return spanner.InsertOrUpdate("Texts", TextColumns(), []interface{}{
		t.TextID, t.Body, t.CreatedAt,
	})
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (t *Text) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, TextPrimaryKeys()...)

	values, err := t.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, newErrorWithCode(codes.InvalidArgument, "Text.UpdateColumns", "Texts", err)
	}

	return spanner.Update("Texts", colsWithPKeys, values), nil
}

// FindText gets a Text by primary key
func FindText(ctx context.Context, db YORODB, textID string) (*Text, error) {
	key := spanner.Key{textID}
	row, err := db.ReadRow(ctx, "Texts", key, TextColumns())
	if err != nil {
		return nil, newError("FindText", "Texts", err)
	}

	decoder := newText_Decoder(TextColumns())
	t, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindText", "Texts", err)
	}

	return t, nil
}

// ReadText retrieves multiples rows from Text by KeySet as a slice.
func ReadText(ctx context.Context, db YORODB, keys spanner.KeySet) ([]*Text, error) {
	var res []*Text

	decoder := newText_Decoder(TextColumns())

	rows := db.Read(ctx, "Texts", keys, TextColumns())
	err := rows.Do(func(row *spanner.Row) error {
		t, err := decoder(row)
		if err != nil {
			return err
		}
		res = append(res, t)

		return nil
	})
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "ReadText", "Texts", err)
	}

	return res, nil
}

// Delete deletes the Text from the database.
func (t *Text) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := t.columnsToValues(TextPrimaryKeys())
	return spanner.Delete("Texts", spanner.Key(values))
}
